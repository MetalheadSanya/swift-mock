{"abstract":[{"text":"This article describes in detail the available possibilities of the stubbing method.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftmock\/stubbing"]}],"hierarchy":{"paths":[["doc:\/\/SwiftMock\/documentation\/SwiftMock"]]},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"type":"text","text":"When we work with mocks we want to have some flexibility in our capabilities. Let’s look at the package’s capabilities."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Calling Methods Sequentially","anchor":"Calling-Methods-Sequentially"},{"inlineContent":[{"type":"text","text":"In some flows, the methods of our mocks may be called several times and we do not always want to receive the same return value. To do this, we can use the builder’s call chain."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Mock","public protocol AlbumService {","\tfunc getAlbumName() async throws -> String","}","","func test() {","\tlet mock = AlbumServiceMock()","\t","\twhen(mock.$getAlbumName())","\t\t.thenReturn(\"#4\")","\t\t.thenReturn(\"Inspiration Is Dead\")","\t\t.thenReturn(\"Just a Moment\")","}"]},{"inlineContent":[{"type":"text","text":"In this case, the first time we call the "},{"code":"getAlbumName()","type":"codeVoice"},{"text":" method, we will get the value ","type":"text"},{"type":"codeVoice","code":"\"#4\""},{"text":", the second time we will get the value ","type":"text"},{"code":"\"Inspiration Is Dead\"","type":"codeVoice"},{"text":", and all subsequent times we will get the value ","type":"text"},{"type":"codeVoice","code":"\"Just a Moment\""},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Dealing with errors","level":3,"anchor":"Dealing-with-errors","type":"heading"},{"inlineContent":[{"type":"text","text":"Sometimes we want to test not only the success path of our code, but also those moments when one of our services threw us some error at a certain moment. The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/ThrowsMethodInvocationBuilder\/thenThrow(_:)"},{"type":"text","text":" method is used for this. Please note that this method is present in the builder only if the method we want to stub is marked as "},{"type":"codeVoice","code":"throws"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["@Mock","public protocol AlbumService {","\tfunc getAlbumName() async throws -> String","}","","public enum AlbumServiceError: Error {","\tcase endOfDiscography","}","","func test() {","\tlet mock = AlbumServiceMock()","","\twhen(mock.$getAlbumName())","\t\t.thenReturn(\"#4\")","\t\t.thenReturn(\"Inspiration Is Dead\")","\t\t.thenThrow(AlbumServiceError.endOfDiscography)","\t\t.thenReturn(\"#4\")","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"In this case, after retrieving the first two albums of the group when calling the "},{"type":"codeVoice","code":"getAlbumName()"},{"text":" method, the method will throw an ","type":"text"},{"type":"codeVoice","code":"endOfDiscography"},{"type":"text","text":" error."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to this, we can see that we can combine "},{"isActive":true,"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/ThrowsMethodInvocationBuilder\/thenReturn(_:)-23hjy","type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/ThrowsMethodInvocationBuilder\/thenThrow(_:)","isActive":true,"type":"reference"},{"type":"text","text":" in any order we need."}]},{"type":"heading","level":3,"text":"Argument Matchers","anchor":"Argument-Matchers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, a method stubbing accepts any arguments and does not check them in any way. To describe method stubbing for specific arguments, we can use the "},{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/eq(_:)","isActive":true,"type":"reference"},{"type":"text","text":" function."}]},{"syntax":"swift","code":["@Mock","public protocol AlbumService {","\tfunc getAlbum(id: UUID, group: String) async throws -> Album","}","","public enum AlbumServiceError: Error {","\tcase notFound","}","","func test() async throws {","\tlet uuid = UUID()","\tlet expected = Album(","\t\tuuid: uuid,","\t\tname: \"Last Aurorally\",","\t\tgroup: \"Ling Toshite Shigure\"","\t)","","\tlet mock = AlbumServiceMock()","","\twhen(mock.$getAlbum(id: eq(uuid)))","\t\t.thenReturn(album)","","\tlet actual = try await mock.getAlbum(","\t\tid: uuid, ","\t\tgroup: \"Ling Toshite Shigure\"","\t)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can omit any arguments you don’t want to check. In this case, matcher "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/any()"},{"type":"text","text":" will be used for this argument."}]},{"type":"heading","text":"Stubbing order","anchor":"Stubbing-order","level":3},{"type":"paragraph","inlineContent":[{"text":"The order of stubbing plays an important role in choosing what data the system will use. The system looks for the last matching registered stubbing in order to return a value. In this regard, it is recommended to always first describe more general stubbings, using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/any()"},{"type":"text","text":" for example, and then more specific ones."}]},{"syntax":"swift","code":["@Mock","public protocol AlbumService {","\tfunc getAlbum(id: UUID) async throws -> Album","}","","public enum AlbumServiceError: Error {","\tcase notFound","}","","func test() async throws {","\tlet uuid = UUID()","\tlet expected = Album(","\t\tuuid: uuid,","\t\tname: \"Last Aurorally\",","\t\tgroup: \"Ling Toshite Shigure\"","\t)","","\tlet mock = AlbumServiceMock()","","\twhen(mock.$getAlbum())","\t\t.thenThrow(AlbumServiceError.notFound)","\twhen(mock.$getAlbum(id: eq(uuid)))","\t\t.thenReturn(album)","","\tlet actual = try await mock.getAlbum(","\t\tid: uuid","\t)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we swap the stubbing of the "},{"type":"codeVoice","code":"getAlbum()"},{"type":"text","text":" method in this example, we will always get an error, since our specific "},{"code":"uuid","type":"codeVoice"},{"type":"text","text":" matches the "},{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/any()","isActive":true,"type":"reference"},{"type":"text","text":" matcher check."}]},{"text":"Override Stubbing","anchor":"Override-Stubbing","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we sequentially define two stubbings with the same argument matchers, then the second stubbing will override the first. This means that we will never get the same values or errors that we described in the first one."}]},{"inlineContent":[{"type":"text","text":"If you really need such functionality, then your code most likely has a smell, but such a possibility still exists."}],"type":"paragraph"},{"code":["@Mock","public protocol AlbumService {","\tfunc getAlbum(id: UUID) async throws -> Album","}","","public enum AlbumServiceError: Error {","\tcase notFound","}","","func test() async throws {","\tlet uuid = UUID()","\tlet expected = Album(","\t\tuuid: uuid,","\t\tname: \"I'mperfect\",","\t\tgroup: \"Ling Toshite Shigure\"","\t)","","\tlet mock = AlbumServiceMock()","","\twhen(mock.$getAlbum())","\t\t.thenThrow(AlbumServiceError.notFound)","","\tlet album = try await mock.getAlbum(uuid: UUID()) \/\/ Throw a error.","","\twhen(mock.$getAlbum())","\t\t.thenReturn(expected)","","\t\/\/ All calls of getAlbum() will return \"I'mperfect\" album.","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"SwiftMock"}],"title":"Stubbing"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Stubbing"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SwiftMock\/documentation\/SwiftMock\/Introduction","doc:\/\/SwiftMock\/documentation\/SwiftMock\/Argument-Matchers"],"title":"Usage"}],"references":{"doc://SwiftMock/documentation/SwiftMock/Introduction":{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Introduction","url":"\/documentation\/swiftmock\/introduction","kind":"article","role":"article","title":"Introduction","type":"topic","abstract":[{"type":"text","text":"First steps in protocol mocking."}]},"doc://SwiftMock/documentation/SwiftMock/eq(_:)":{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/eq(_:)","url":"\/documentation\/swiftmock\/eq(_:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"eq"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Arguments"},{"text":">(","kind":"text"},{"text":"Arguments","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ArgumentMatcher","preciseIdentifier":"s:9SwiftMock15ArgumentMatchera"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Arguments"},{"kind":"text","text":">"}],"type":"topic","title":"eq(_:)","abstract":[{"type":"text","text":"Tests that the argument is equal to the given value."}]},"doc://SwiftMock/documentation/SwiftMock/any()":{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/any()","url":"\/documentation\/swiftmock\/any()","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"any"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Arguments"},{"text":">() -> ","kind":"text"},{"preciseIdentifier":"s:9SwiftMock15ArgumentMatchera","text":"ArgumentMatcher","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Arguments"},{"kind":"text","text":">"}],"title":"any()","type":"topic","abstract":[{"type":"text","text":"Any possible value is suitable."}]},"doc://SwiftMock/documentation/SwiftMock/Argument-Matchers":{"abstract":[{"type":"text","text":"This article talks about how Argument Matcher works."}],"type":"topic","kind":"article","url":"\/documentation\/swiftmock\/argument-matchers","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Argument-Matchers","title":"Argument Matchers","role":"article"},"doc://SwiftMock/documentation/SwiftMock":{"role":"collection","kind":"symbol","type":"topic","abstract":[{"text":"A package to simplify writing tests by automating the process of creating mock objects.","type":"text"}],"url":"\/documentation\/swiftmock","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock","title":"SwiftMock"},"doc://SwiftMock/documentation/SwiftMock/ThrowsMethodInvocationBuilder/thenThrow(_:)":{"abstract":[],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"thenThrow"},{"text":"(","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"}],"kind":"symbol","url":"\/documentation\/swiftmock\/throwsmethodinvocationbuilder\/thenthrow(_:)","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/ThrowsMethodInvocationBuilder\/thenThrow(_:)","title":"thenThrow(_:)","role":"symbol"},"doc://SwiftMock/documentation/SwiftMock/ThrowsMethodInvocationBuilder/thenReturn(_:)-23hjy":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"thenReturn"},{"kind":"text","text":"("},{"text":"Result","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/ThrowsMethodInvocationBuilder\/thenReturn(_:)-23hjy","title":"thenReturn(_:)","url":"\/documentation\/swiftmock\/throwsmethodinvocationbuilder\/thenreturn(_:)-23hjy","abstract":[]}}}