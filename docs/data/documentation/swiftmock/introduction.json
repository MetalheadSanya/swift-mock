{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This article will cover the basic use of the package and the necessary methods to get started."}]},{"type":"heading","level":3,"text":"Mock Creation","anchor":"Mock-Creation"},{"type":"paragraph","inlineContent":[{"text":"First of all, I would like to clarify that at the moment the package allows you to create Mock objects only for public protocols that contain only methods and do not contain any properties.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to generate a mock type for your protocol, you need to add the "},{"code":"@Mock","type":"codeVoice"},{"text":" macro before the protocol keyword.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Mock","public protocol SomeProtocol {","}"]},{"inlineContent":[{"type":"text","text":"This macro will generate a new public type with the protocol name and the suffix "},{"code":"Mock","type":"codeVoice"},{"text":". In our example, the type name will be ","type":"text"},{"code":"SomeProtocolMock","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Stubbing basics","anchor":"Stubbing-basics"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add the "},{"code":"getAlbumName()","type":"codeVoice"},{"type":"text","text":" method to our protocol, which returns the name of the album with the "},{"code":"String","type":"codeVoice"},{"text":" type. And let’s move on to writing the test.","type":"text"}]},{"code":["@Mock","public protocol SomeProtocol {","\tfunc getAlbumName() async throws -> String","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"From this moment on, the generated mock object contains the basic functionality for stubbing protocol methods. To stub methods we must use the ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/when(_:)-1l8q0","isActive":true},{"type":"text","text":" function. As a function argument, we must indicate which method of which mock object we want to stub. This is done by calling a generated method with an identical name and the "},{"code":"$","type":"codeVoice"},{"text":" prefix on the mock object.","type":"text"}],"type":"paragraph"},{"code":["func testSomeProtocol() async throws {","\tlet mock = SomeProtocolMock()","\t","\twhen(mock.$getAlbumName())","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/when(_:)-1l8q0","isActive":true},{"type":"text","text":" function returns us a builder, which allows us to determine what our method should return if called. The "},{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/AsyncThrowsMethodInvocationBuilder\/thenReturn(_:)-52q00","isActive":true,"type":"reference"},{"type":"text","text":" method is used for this."}],"type":"paragraph"},{"code":["func testSomeProtocol async throws {","\tlet mock = SomeProtocolMock()","","\twhen(mock.$getAlbumName())","\t\t.thenReturn(\"I'mperfect\")","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"After this, whenever we call the ","type":"text"},{"type":"codeVoice","code":"getAlbumName()"},{"text":" method, we will receive the value that we specified in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/AsyncThrowsMethodInvocationBuilder\/thenReturn(_:)-52q00"},{"text":" method.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func testSomeProtocol() async throws {","\tlet mock = SomeProtocolMock()","","\twhen(mock.$getAlbumName())","\t\t.thenReturn(\"I'mperfect\")","","\tlet albumName = try await mock.getAlbumName()","","\tXCTAssertEqual(\"I'mperfect\", albumName)","}"]},{"type":"paragraph","inlineContent":[{"text":"For more details see: ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Stubbing"}]},{"text":"Verification basics","type":"heading","anchor":"Verification-basics","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"When we stab our mock objects, most often we want to check that the necessary methods on the mock object have been called. For this purpose, there is the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/verify(_:times:)"},{"text":" method, which allows you to check the number of calls of a particular method and with what arguments it was called.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Let’s look at the following example. We want to write a test that checks that we requested a name for each album id passed in and check that we get the same album names that we passed into the mock in the correct order.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s imagine the following facade above our service"}]},{"code":["final class SomeFacade {","\tvar service: SomeProtocol","","\tinit(service: SomeProtocol) {","\t\tself.service = service","\t}","","\tfunc fetchAlbumNames(_ ids: [String]) async throws -> [String] {","\t\tvar albums = [String]","\t\talbums.reserveCapacity(ids.count)","\t\tfor id in ids {","\t\t\ttry await albums.append(service.getAlbumName(id: id))","\t\t}","\t\treturn albums","\t}","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"For this test, first of all, we must create a mock and stab the method with all the necessary data. After that, we create our facade object and inject the mock there. As a final step, we call the facade method we want to test, get the data, check it and check the mock calls.","type":"text"}],"type":"paragraph"},{"code":["func testFetchAlbum() async throws {","\tlet mock = SomeProtocolMock()","","\tlet passedIds = [","\t\t\"id1\",","\t\t\"id2\",","\t\t\"id3\",","\t\t\"id4\",","\t]","","\tlet expected = [","\t\t\"#4\",","\t\t\"Inspiration Is Dead\",","\t\t\"Just a Moment\",","\t\t\"Still a Sigure Virgin?\",","\t]","","\tfor (id, name) in zip(passedIds, expected) {","\t\twhen(mock.$getAlbumName(id: eq(id)))","\t\t\t.thenReturn(name)","\t}","","\tlet facade = SomeFacade(service: mock)","","\tlet actual = try await facade.fetchAlbumNames(passedIds)","","\tXCTAssertEqual(expected, actual)","","\tfor id in passedIds {","\t\tverify(mock).getAlbumName(id: eq(id))","\t}","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"For more details see ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Verifying","isActive":true}]}]}],"abstract":[{"text":"First steps in protocol mocking.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftMock\/documentation\/SwiftMock\/Stubbing","doc:\/\/SwiftMock\/documentation\/SwiftMock\/Argument-Matchers","doc:\/\/SwiftMock\/documentation\/SwiftMock\/Verifying"],"title":"Usage","generated":true}],"hierarchy":{"paths":[["doc:\/\/SwiftMock\/documentation\/SwiftMock"]]},"metadata":{"role":"article","title":"Introduction","modules":[{"name":"SwiftMock"}],"roleHeading":"Article"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftmock\/introduction"]}],"identifier":{"url":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Introduction","interfaceLanguage":"swift"},"kind":"article","references":{"doc://SwiftMock/documentation/SwiftMock/Stubbing":{"url":"\/documentation\/swiftmock\/stubbing","type":"topic","abstract":[{"type":"text","text":"This article describes in detail the available possibilities of the stubbing method."}],"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Stubbing","kind":"article","role":"article","title":"Stubbing"},"doc://SwiftMock/documentation/SwiftMock/AsyncThrowsMethodInvocationBuilder/thenReturn(_:)-52q00":{"abstract":[],"url":"\/documentation\/swiftmock\/asyncthrowsmethodinvocationbuilder\/thenreturn(_:)-52q00","role":"symbol","title":"thenReturn(_:)","kind":"symbol","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/AsyncThrowsMethodInvocationBuilder\/thenReturn(_:)-52q00","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"thenReturn"},{"text":"(","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://SwiftMock/documentation/SwiftMock":{"kind":"symbol","role":"collection","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock","type":"topic","abstract":[{"text":"A package to simplify writing tests by automating the process of creating mock objects.","type":"text"}],"title":"SwiftMock","url":"\/documentation\/swiftmock"},"doc://SwiftMock/documentation/SwiftMock/when(_:)-1l8q0":{"title":"when(_:)","url":"\/documentation\/swiftmock\/when(_:)-1l8q0","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"when"},{"text":"<","kind":"text"},{"text":"Arguments","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"AsyncMethodSignature","preciseIdentifier":"s:9SwiftMock20AsyncMethodSignatureV"},{"text":"<","kind":"text"},{"text":"Arguments","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"text":"AsyncMethodInvocationBuilder","kind":"typeIdentifier","preciseIdentifier":"s:9SwiftMock28AsyncMethodInvocationBuilderC"},{"text":"<","kind":"text"},{"text":"Arguments","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":">","kind":"text"}],"abstract":[{"text":"Enables stubbing methods. Use it when you want the mock to return particular value when particular method is called.","type":"text"}],"type":"topic","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/when(_:)-1l8q0"},"doc://SwiftMock/documentation/SwiftMock/Verifying":{"title":"Verifying","url":"\/documentation\/swiftmock\/verifying","role":"article","kind":"article","abstract":[{"type":"text","text":"This article describes in detail the available possibilities of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/verify(_:times:)"},{"type":"text","text":" method."}],"type":"topic","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Verifying"},"doc://SwiftMock/documentation/SwiftMock/verify(_:times:)":{"type":"topic","title":"verify(_:times:)","role":"symbol","url":"\/documentation\/swiftmock\/verify(_:times:)","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/verify(_:times:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"verify","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Mock","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Mock","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"times","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TimesMatcher","preciseIdentifier":"s:9SwiftMock12TimesMatchera","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Mock"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Verify"}],"abstract":[]},"doc://SwiftMock/documentation/SwiftMock/Argument-Matchers":{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Argument-Matchers","kind":"article","abstract":[{"type":"text","text":"This article talks about how Argument Matcher works."}],"role":"article","url":"\/documentation\/swiftmock\/argument-matchers","type":"topic","title":"Argument Matchers"}}}