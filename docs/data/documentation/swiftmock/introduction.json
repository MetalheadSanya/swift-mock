{"abstract":[{"type":"text","text":"First steps in protocol mocking."}],"kind":"article","hierarchy":{"paths":[["doc:\/\/SwiftMock\/documentation\/SwiftMock"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftmock\/introduction"]}],"seeAlsoSections":[{"title":"Usage","identifiers":["doc:\/\/SwiftMock\/documentation\/SwiftMock\/Stubbing","doc:\/\/SwiftMock\/documentation\/SwiftMock\/Argument-Matchers"],"generated":true}],"metadata":{"title":"Introduction","modules":[{"name":"SwiftMock"}],"role":"article","roleHeading":"Article"},"identifier":{"url":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Introduction","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This article will cover the basic use of the package and the necessary methods to get started."}]},{"text":"Mock Creation","level":3,"type":"heading","anchor":"Mock-Creation"},{"inlineContent":[{"text":"First of all, I would like to clarify that at the moment the package allows you to create Mock objects only for public protocols that contain only methods and do not contain any properties.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In order to generate a mock type for your protocol, you need to add the ","type":"text"},{"code":"@Mock","type":"codeVoice"},{"type":"text","text":" macro before the protocol keyword."}]},{"type":"codeListing","code":["@Mock","public protocol SomeProtocol {","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This macro will generate a new public type with the protocol name and the suffix "},{"type":"codeVoice","code":"Mock"},{"type":"text","text":". In our example, the type name will be "},{"type":"codeVoice","code":"SomeProtocolMock"},{"text":".","type":"text"}]},{"level":3,"text":"Stubbing basics","anchor":"Stubbing-basics","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add the "},{"code":"getAlbumName()","type":"codeVoice"},{"type":"text","text":" method to our protocol, which returns the name of the album with the "},{"type":"codeVoice","code":"String"},{"text":" type. And let’s move on to writing the test.","type":"text"}]},{"code":["@Mock","public protocol SomeProtocol {","\tfunc getAlbumName() async throws -> String","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"From this moment on, the generated mock object contains the basic functionality for stubbing protocol methods. To stub methods we must use the "},{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/when(_:)-1l8q0","type":"reference","isActive":true},{"text":" function. As a function argument, we must indicate which method of which mock object we want to stub. This is done by calling a generated method with an identical name and the ","type":"text"},{"code":"$","type":"codeVoice"},{"type":"text","text":" prefix on the mock object."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func testSomeProtocol() async throws {","\tlet mock = SomeProtocolMock()","\t","\twhen(mock.$getAlbumName())","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/when(_:)-1l8q0","type":"reference","isActive":true},{"text":" function returns us a builder, which allows us to determine what our method should return if called. The ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/AsyncThrowsMethodInvocationBuilder\/thenReturn(_:)-52q00","type":"reference"},{"type":"text","text":" method is used for this."}]},{"type":"codeListing","syntax":"swift","code":["func testSomeProtocol async throws {","\tlet mock = SomeProtocolMock()","","\twhen(mock.$getAlbumName())","\t\t.thenReturn(\"I'mperfect\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After this, whenever we call the "},{"type":"codeVoice","code":"getAlbumName()"},{"text":" method, we will receive the value that we specified in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/AsyncThrowsMethodInvocationBuilder\/thenReturn(_:)-52q00"},{"type":"text","text":" method."}]},{"type":"codeListing","syntax":"swift","code":["func testSomeProtocol() async throws {","\tlet mock = SomeProtocolMock()","","\twhen(mock.$getAlbumName())","\t\t.thenReturn(\"I'mperfect\")","","\tlet albumName = try await mock.getAlbumName()","","\tXCTAssertEqual(\"I'mperfect\", albumName)","}"]}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"references":{"doc://SwiftMock/documentation/SwiftMock/AsyncThrowsMethodInvocationBuilder/thenReturn(_:)-52q00":{"abstract":[],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"thenReturn","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"url":"\/documentation\/swiftmock\/asyncthrowsmethodinvocationbuilder\/thenreturn(_:)-52q00","type":"topic","title":"thenReturn(_:)","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/AsyncThrowsMethodInvocationBuilder\/thenReturn(_:)-52q00"},"doc://SwiftMock/documentation/SwiftMock/Argument-Matchers":{"abstract":[{"text":"This article talks about how Argument Matcher works.","type":"text"}],"role":"article","type":"topic","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Argument-Matchers","title":"Argument Matchers","url":"\/documentation\/swiftmock\/argument-matchers","kind":"article"},"doc://SwiftMock/documentation/SwiftMock/when(_:)-1l8q0":{"kind":"symbol","url":"\/documentation\/swiftmock\/when(_:)-1l8q0","abstract":[{"type":"text","text":"Enables stubbing methods. Use it when you want the mock to return particular value when particular method is called."}],"role":"symbol","title":"when(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"when","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Arguments","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"AsyncMethodSignature","preciseIdentifier":"s:9SwiftMock20AsyncMethodSignatureV"},{"text":"<","kind":"text"},{"text":"Arguments","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:9SwiftMock28AsyncMethodInvocationBuilderC","text":"AsyncMethodInvocationBuilder"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Arguments"},{"kind":"text","text":", "},{"text":"Result","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/when(_:)-1l8q0"},"doc://SwiftMock/documentation/SwiftMock":{"type":"topic","abstract":[{"type":"text","text":"A package to simplify writing tests by automating the process of creating mock objects."}],"kind":"symbol","url":"\/documentation\/swiftmock","title":"SwiftMock","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock","role":"collection"},"doc://SwiftMock/documentation/SwiftMock/Stubbing":{"abstract":[{"type":"text","text":"This article describes in detail the available possibilities of the stubbing method."}],"kind":"article","title":"Stubbing","type":"topic","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Stubbing","url":"\/documentation\/swiftmock\/stubbing","role":"article"}}}