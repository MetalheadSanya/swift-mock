{"seeAlsoSections":[{"title":"Usage","identifiers":["doc:\/\/SwiftMock\/documentation\/SwiftMock\/Stubbing","doc:\/\/SwiftMock\/documentation\/SwiftMock\/Argument-Matchers","doc:\/\/SwiftMock\/documentation\/SwiftMock\/Verifying"],"generated":true}],"kind":"article","sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftMock\/documentation\/SwiftMock"]]},"variants":[{"paths":["\/documentation\/swiftmock\/introduction"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Introduction","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"First steps in protocol mocking."}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This article will cover the basic use of the package and the necessary methods to get started."}]},{"anchor":"Mock-Creation","text":"Mock Creation","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First of all, I would like to clarify that at the moment the package allows you to create Mock objects only for public protocols that contain only methods and do not contain any properties."}]},{"inlineContent":[{"type":"text","text":"In order to generate a mock type for your protocol, you need to add the "},{"type":"codeVoice","code":"@Mock"},{"type":"text","text":" macro before the protocol keyword."}],"type":"paragraph"},{"syntax":"swift","code":["@Mock","public protocol SomeProtocol {","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This macro will generate a new public type with the protocol name and the suffix "},{"type":"codeVoice","code":"Mock"},{"type":"text","text":". In our example, the type name will be "},{"code":"SomeProtocolMock","type":"codeVoice"},{"text":".","type":"text"}]},{"text":"Stubbing basics","type":"heading","level":3,"anchor":"Stubbing-basics"},{"type":"paragraph","inlineContent":[{"text":"Let’s add the ","type":"text"},{"type":"codeVoice","code":"getAlbumName()"},{"type":"text","text":" method to our protocol, which returns the name of the album with the "},{"code":"String","type":"codeVoice"},{"type":"text","text":" type. And let’s move on to writing the test."}]},{"type":"codeListing","code":["@Mock","public protocol SomeProtocol {","\tfunc getAlbumName() async throws -> String","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"From this moment on, the generated mock object contains the basic functionality for stubbing protocol methods. To stub methods we must use the "},{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/when(_:)-1l8q0","type":"reference","isActive":true},{"type":"text","text":" function. As a function argument, we must indicate which method of which mock object we want to stub. This is done by calling a generated method with an identical name and the "},{"code":"$","type":"codeVoice"},{"text":" prefix on the mock object.","type":"text"}]},{"syntax":"swift","code":["func testSomeProtocol() async throws {","\tlet mock = SomeProtocolMock()","\t","\twhen(mock.$getAlbumName())","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/when(_:)-1l8q0","isActive":true},{"text":" function returns us a builder, which allows us to determine what our method should return if called. The ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/AsyncThrowsMethodInvocationBuilder\/thenReturn(_:)-52q00","isActive":true},{"text":" method is used for this.","type":"text"}]},{"code":["func testSomeProtocol async throws {","\tlet mock = SomeProtocolMock()","","\twhen(mock.$getAlbumName())","\t\t.thenReturn(\"I'mperfect\")","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"After this, whenever we call the ","type":"text"},{"type":"codeVoice","code":"getAlbumName()"},{"type":"text","text":" method, we will receive the value that we specified in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/AsyncThrowsMethodInvocationBuilder\/thenReturn(_:)-52q00"},{"text":" method.","type":"text"}]},{"code":["func testSomeProtocol() async throws {","\tlet mock = SomeProtocolMock()","","\twhen(mock.$getAlbumName())","\t\t.thenReturn(\"I'mperfect\")","","\tlet albumName = try await mock.getAlbumName()","","\tXCTAssertEqual(\"I'mperfect\", albumName)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"For more details see: ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Stubbing","isActive":true}],"type":"paragraph"},{"level":3,"text":"Verification basics","anchor":"Verification-basics","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"When we stab our mock objects, most often we want to check that the necessary methods on the mock object have been called. For this purpose, there is the ","type":"text"},{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/verify(_:times:)","isActive":true,"type":"reference"},{"text":" method, which allows you to check the number of calls of a particular method and with what arguments it was called.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Let’s look at the following example. We want to write a test that checks that we requested a name for each album id passed in and check that we get the same album names that we passed into the mock in the correct order.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Let’s imagine the following facade above our service"}],"type":"paragraph"},{"code":["final class SomeFacade {","\tvar service: SomeProtocol","","\tinit(service: SomeProtocol) {","\t\tself.service = service","\t}","","\tfunc fetchAlbumNames(_ ids: [String]) async throws -> [String] {","\t\tvar albums = [String]","\t\talbums.reserveCapacity(ids.count)","\t\tfor id in ids {","\t\t\ttry await albums.append(service.getAlbumName(id: id))","\t\t}","\t\treturn albums","\t}","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For this test, first of all, we must create a mock and stab the method with all the necessary data. After that, we create our facade object and inject the mock there. As a final step, we call the facade method we want to test, get the data, check it and check the mock calls."}]},{"code":["func testFetchAlbum() async throws {","\tlet mock = SomeProtocolMock()","","\tlet passedIds = [","\t\t\"id1\",","\t\t\"id2\",","\t\t\"id3\",","\t\t\"id4\",","\t]","","\tlet expected = [","\t\t\"#4\",","\t\t\"Inspiration Is Dead\",","\t\t\"Just a Moment\",","\t\t\"Still a Sigure Virgin?\",","\t]","","\tfor (id, name) in zip(passedIds, expected) {","\t\twhen(mock.$getAlbumName(id: eq(id)))","\t\t\t.thenReturn(name)","\t}","","\tlet facade = SomeFacade(service: mock)","","\tlet actual = try await facade.fetchAlbumNames(passedIds)","","\tXCTAssertEqual(expected, actual)","","\tfor id in passedIds {","\t\tverify(mock).getAlbumName(id: eq(id))","\t}","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more details see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Verifying"}]}]}],"metadata":{"roleHeading":"Article","modules":[{"name":"SwiftMock"}],"role":"article","title":"Introduction"},"references":{"doc://SwiftMock/documentation/SwiftMock/Argument-Matchers":{"abstract":[{"type":"text","text":"This article talks about how Argument Matcher works."}],"kind":"article","title":"Argument Matchers","url":"\/documentation\/swiftmock\/argument-matchers","type":"topic","role":"article","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Argument-Matchers"},"doc://SwiftMock/documentation/SwiftMock/AsyncThrowsMethodInvocationBuilder/thenReturn(_:)-52q00":{"type":"topic","title":"thenReturn(_:)","abstract":[],"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/AsyncThrowsMethodInvocationBuilder\/thenReturn(_:)-52q00","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"thenReturn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Result"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"url":"\/documentation\/swiftmock\/asyncthrowsmethodinvocationbuilder\/thenreturn(_:)-52q00","kind":"symbol","role":"symbol"},"doc://SwiftMock/documentation/SwiftMock":{"title":"SwiftMock","abstract":[{"type":"text","text":"A package to simplify writing tests by automating the process of creating mock objects."}],"url":"\/documentation\/swiftmock","type":"topic","kind":"symbol","role":"collection","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock"},"doc://SwiftMock/documentation/SwiftMock/verify(_:times:)":{"url":"\/documentation\/swiftmock\/verify(_:times:)","kind":"symbol","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/verify(_:times:)","abstract":[],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"verify","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Mock"},{"text":">(","kind":"text"},{"text":"Mock","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"times","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9SwiftMock12TimesMatchera","kind":"typeIdentifier","text":"TimesMatcher"},{"text":") -> ","kind":"text"},{"text":"Mock","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Verify","kind":"typeIdentifier"}],"title":"verify(_:times:)","type":"topic"},"doc://SwiftMock/documentation/SwiftMock/Stubbing":{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Stubbing","title":"Stubbing","abstract":[{"type":"text","text":"This article describes in detail the available possibilities of the stubbing method."}],"url":"\/documentation\/swiftmock\/stubbing","kind":"article","role":"article","type":"topic"},"doc://SwiftMock/documentation/SwiftMock/Verifying":{"role":"article","title":"Verifying","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Verifying","url":"\/documentation\/swiftmock\/verifying","abstract":[{"type":"text","text":"This article describes in detail the available possibilities of the "},{"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/verify(_:times:)","isActive":true},{"type":"text","text":" method."}],"kind":"article","type":"topic"},"doc://SwiftMock/documentation/SwiftMock/when(_:)-1l8q0":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"when"},{"text":"<","kind":"text"},{"text":"Arguments","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:9SwiftMock20AsyncMethodSignatureV","text":"AsyncMethodSignature"},{"kind":"text","text":"<"},{"text":"Arguments","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"AsyncMethodInvocationBuilder","preciseIdentifier":"s:9SwiftMock28AsyncMethodInvocationBuilderC"},{"text":"<","kind":"text"},{"text":"Arguments","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":">","kind":"text"}],"role":"symbol","type":"topic","title":"when(_:)","abstract":[{"text":"Enables stubbing methods. Use it when you want the mock to return particular value when particular method is called.","type":"text"}],"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/when(_:)-1l8q0","url":"\/documentation\/swiftmock\/when(_:)-1l8q0","kind":"symbol"}}}