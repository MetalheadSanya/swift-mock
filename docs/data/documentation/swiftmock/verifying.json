{"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"kind":"article","abstract":[{"type":"text","text":"This article describes in detail the available possibilities of the "},{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/verify(_:times:)","isActive":true,"type":"reference"},{"type":"text","text":" method."}],"metadata":{"roleHeading":"Article","modules":[{"name":"SwiftMock"}],"role":"article","title":"Verifying"},"hierarchy":{"paths":[["doc:\/\/SwiftMock\/documentation\/SwiftMock"]]},"identifier":{"url":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Verifying","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftMock\/documentation\/SwiftMock\/Introduction","doc:\/\/SwiftMock\/documentation\/SwiftMock\/Stubbing","doc:\/\/SwiftMock\/documentation\/SwiftMock\/Argument-Matchers"],"generated":true,"title":"Usage"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftmock\/verifying"]}],"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"When we work with mocks we want to have some flexibility in our capabilities. Let’s look at the package’s capabilities.","type":"text"}]},{"type":"heading","anchor":"Checking-that-method-was-called","text":"Checking that method was called","level":3},{"inlineContent":[{"type":"text","text":"To verify that the mock method was called, use the "},{"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/verify(_:times:)","isActive":true},{"text":" method and pass the mock object as the first argument. This method will create a ","type":"text"},{"type":"codeVoice","code":"Verify"},{"text":" structure for you that has the same methods as your protocol. You can call any method from the protocol methods to check that the method has currently been called.","type":"text"}],"type":"paragraph"},{"code":["@Mock","public protocol AlbumService {","\tfunc getAlbumName(id: String) async throws -> String","}","","","func test() {","\tlet mock = AlbumServiceMock()","","\twhen(mock.$getAlbumName())","\t\t.thenReturn(\"#4\")","","\t_ = mock.getAlbumName(id: \"id1\")","","\tverify(mock).getAlbumName()","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, verify checks that the method was called exactly one time. If the method was called more than once, you will receive an error."}]},{"anchor":"Checking-that-property-was-read","text":"Checking that property was read","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"To verify that the mock property has been read, use the "},{"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/verify(_:times:)","isActive":true},{"type":"text","text":" method and pass the mock object as the first argument. This method will create a "},{"type":"codeVoice","code":"Verify"},{"type":"text","text":" structure for you that has a method to verify that your property has been read. The name of the method is "},{"type":"codeVoice","code":"propertyGetter()"},{"type":"text","text":", where "},{"type":"codeVoice","code":"property"},{"text":" is the name of your property. All rules regarding method call verification work similarly for properties.","type":"text"}]},{"syntax":"swift","code":["@Mock","public protocol SomeService {","\tvar property: Int { get }","}","","","func test() {","\tlet mock = SomeServiceMock()","","\twhen(mock.$propertyGetter())","\t\t.thenReturn(4)","","\t_ = mock.property","","\tverify(mock).propertyGetter()","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, verify checks that the property was read exactly one time. If the property was read more than once, you will receive an error."}]},{"type":"heading","anchor":"Checking-that-property-was-write","level":3,"text":"Checking that property was write"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To verify that the mock property has been write, use the "},{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/verify(_:times:)","isActive":true,"type":"reference"},{"text":" method and pass the mock object as the first argument. This method will create a ","type":"text"},{"code":"Verify","type":"codeVoice"},{"text":" structure for you that has a method to verify that your property has been write. The name of the method is ","type":"text"},{"code":"propertySetter(_:)","type":"codeVoice"},{"text":", where ","type":"text"},{"type":"codeVoice","code":"property"},{"text":" is the name of your property. All rules regarding method call verification work similarly for properties. Additionally, you can pass any ","type":"text"},{"code":"AttributeMatcher","type":"codeVoice"},{"text":" to the ","type":"text"},{"type":"codeVoice","code":"propertySetter(_:)"},{"text":" method to check that a certain value has been set to the property.","type":"text"}]},{"code":["@Mock","public protocol SomeService {","\tvar property: Int { get set }","}","","","func test() {","\tlet mock = SomeServiceMock()","","\twhen(mock.$propertySetter())","\t\t.thenReturn()","","\tmock.property = 6","","\t\/\/ Checking that any value has been set to the property.","\tverify(mock).propertySetter()","","\t\/\/ Checking that 6 (six) has been set to the property.","\tverify(mock).propertySetter(eq(6))","}"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":3,"text":"Checking that method was called with specific arguments","anchor":"Checking-that-method-was-called-with-specific-arguments"},{"inlineContent":[{"text":"The methods of a ","type":"text"},{"code":"Verify","type":"codeVoice"},{"text":" structure have all the same methods as your protocol with one exception. All method arguments are replaced with a wrapper in the form of ","type":"text"},{"type":"codeVoice","code":"ArgumentMatcher"},{"text":". As with stubbing, the default argument value is ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/any()","isActive":true},{"text":". If you want to check that a method was called with a certain argument, then you need to specify the appropriate ","type":"text"},{"code":"ArgumentMatcher","type":"codeVoice"},{"text":" for the arguments you want to check.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Mock","public protocol AlbumService {","\tfunc getAlbumName(id: String) async throws -> String","}","","","func test() {","\tlet mock = AlbumServiceMock()","","\twhen(mock.$getAlbumName())","\t\t.thenReturn(\"#4\")","","\t_ = mock.getAlbumName(id: \"id1\")","","\t\/\/ This test fail, because we don't have ","\t\/\/ mock.getAlbumName(id: \"id2\") in out test. ","\tverify(mock).getAlbumName(id: eq(\"id2\")) ","}"],"type":"codeListing"},{"anchor":"Checking-that-method-was-called-specific-times","type":"heading","text":"Checking that method was called specific times","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/verify(_:times:)","isActive":true},{"type":"text","text":" method can check not only that the method was called once, but also a specific number of times. The "},{"type":"codeVoice","code":"times"},{"type":"text","text":" parameter of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/verify(_:times:)"},{"text":" method is used for this. This parameter type is ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/TimesMatcher"},{"text":" and you can use ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/times(_:)","isActive":true},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/never()"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/atLeast(_:)"},{"type":"text","text":", "},{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/atMost(_:)","type":"reference","isActive":true},{"type":"text","text":" as examples, or create your own."}]},{"inlineContent":[{"type":"text","text":"The following example checks that the method has been called at least twice."}],"type":"paragraph"},{"code":["@Mock","public protocol AlbumService {","\tfunc getAlbumName(id: String) async throws -> String","}","","","func test() {","\tlet mock = AlbumServiceMock()","","\twhen(mock.$getAlbumName())","\t\t.thenReturn(\"#4\")","\t\t.thenReturn(\"Inspiration Is Dead\")","","\t_ = mock.getAlbumName(id: \"id1\")","\t_ = mock.getAlbumName(id: \"id2\")","","\tverify(mock, times: atLeast(2)).getAlbumName() ","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"references":{"doc://SwiftMock/documentation/SwiftMock/TimesMatcher":{"navigatorTitle":[{"text":"TimesMatcher","kind":"identifier"}],"type":"topic","title":"TimesMatcher","role":"symbol","abstract":[{"type":"text","text":"A function type that tests the function call count."}],"kind":"symbol","url":"\/documentation\/swiftmock\/timesmatcher","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/TimesMatcher","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TimesMatcher"}]},"doc://SwiftMock/documentation/SwiftMock":{"kind":"symbol","role":"collection","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock","type":"topic","abstract":[{"text":"A package to simplify writing tests by automating the process of creating mock objects.","type":"text"}],"title":"SwiftMock","url":"\/documentation\/swiftmock"},"doc://SwiftMock/documentation/SwiftMock/Stubbing":{"url":"\/documentation\/swiftmock\/stubbing","type":"topic","abstract":[{"type":"text","text":"This article describes in detail the available possibilities of the stubbing method."}],"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Stubbing","kind":"article","role":"article","title":"Stubbing"},"doc://SwiftMock/documentation/SwiftMock/atMost(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"atMost","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"TimesMatcher","preciseIdentifier":"s:9SwiftMock12TimesMatchera"}],"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/atMost(_:)","role":"symbol","url":"\/documentation\/swiftmock\/atmost(_:)","kind":"symbol","abstract":[{"text":"Checks that method was called at most ","type":"text"},{"type":"codeVoice","code":"count"},{"type":"text","text":" times."}],"type":"topic","title":"atMost(_:)"},"doc://SwiftMock/documentation/SwiftMock/Argument-Matchers":{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Argument-Matchers","kind":"article","abstract":[{"type":"text","text":"This article talks about how Argument Matcher works."}],"role":"article","url":"\/documentation\/swiftmock\/argument-matchers","type":"topic","title":"Argument Matchers"},"doc://SwiftMock/documentation/SwiftMock/verify(_:times:)":{"type":"topic","title":"verify(_:times:)","role":"symbol","url":"\/documentation\/swiftmock\/verify(_:times:)","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/verify(_:times:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"verify","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Mock","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Mock","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"times","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TimesMatcher","preciseIdentifier":"s:9SwiftMock12TimesMatchera","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Mock"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Verify"}],"abstract":[]},"doc://SwiftMock/documentation/SwiftMock/Introduction":{"type":"topic","title":"Introduction","role":"article","url":"\/documentation\/swiftmock\/introduction","kind":"article","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/Introduction","abstract":[{"type":"text","text":"First steps in protocol mocking."}]},"doc://SwiftMock/documentation/SwiftMock/never()":{"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/never()","title":"never()","abstract":[{"text":"Checks that method wasn’t called.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/swiftmock\/never()","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"never","kind":"identifier"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:9SwiftMock12TimesMatchera","text":"TimesMatcher"}],"role":"symbol"},"doc://SwiftMock/documentation/SwiftMock/atLeast(_:)":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/atLeast(_:)","type":"topic","abstract":[{"type":"text","text":"Checks that method was calles at least "},{"type":"codeVoice","code":"count"},{"type":"text","text":" times."}],"title":"atLeast(_:)","url":"\/documentation\/swiftmock\/atleast(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"atLeast","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":") -> ","kind":"text"},{"text":"TimesMatcher","kind":"typeIdentifier","preciseIdentifier":"s:9SwiftMock12TimesMatchera"}]},"doc://SwiftMock/documentation/SwiftMock/times(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"times","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"text":"TimesMatcher","kind":"typeIdentifier","preciseIdentifier":"s:9SwiftMock12TimesMatchera"}],"identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/times(_:)","role":"symbol","url":"\/documentation\/swiftmock\/times(_:)","kind":"symbol","abstract":[{"type":"text","text":"Checks that method was called exactly "},{"type":"codeVoice","code":"count"},{"text":" times.","type":"text"}],"title":"times(_:)","type":"topic"},"doc://SwiftMock/documentation/SwiftMock/any()":{"kind":"symbol","type":"topic","identifier":"doc:\/\/SwiftMock\/documentation\/SwiftMock\/any()","title":"any()","url":"\/documentation\/swiftmock\/any()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"any"},{"kind":"text","text":"<"},{"text":"Arguments","kind":"genericParameter"},{"kind":"text","text":">() -> "},{"text":"ArgumentMatcher","kind":"typeIdentifier","preciseIdentifier":"s:9SwiftMock15ArgumentMatchera"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Arguments"},{"kind":"text","text":">"}],"role":"symbol","abstract":[{"type":"text","text":"Any possible value is suitable."}]}}}